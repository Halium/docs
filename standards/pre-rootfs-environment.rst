Pre-rootfs environment
======================

Introduction
------------

Halium-standard Linux distributions have different needs than their "Desktop" or "Laptop" counterparts. Often, a Halium-standard distribution will need to start the Android container before it is able to complete its initialization. The Halium pre-rootfs environment ensures that the distribution will be able to successfully start the Android container and continue booting.

Scope
-----

This document specifies the minimum requirements for a pre-rootfs environment that is able to boot Halium-standard Linux distributions. By doing so, it also specifies what a maintainer of a Halium-standard distribution may expect when their software begins to run.

Halium-standard distribution maintainers may wish to skip to `Annex A: Summary for HSDs`_ to understand the parts of this standard that apply to them.

Terms and definitions
---------------------

This document follows the general terms, definitions, and expressions defined in the Halium :ref:`standard-terms-and-conventions` with the following additions:

Pre-rootfs environment
    Code that executes before the init system of the HSD begins to run.

Rootfs
------

The pre-rootfs environment shall mount the HSD rootfs and its desired Android system.img from persistent storage. The rootfs can take the following formats:

* ``rootfs.img``, an image file located on the Device's ``/data`` partition. It will be accompanied by ``system.img``, which will be a sibling in its directory.
* ``halium-rootfs/``, a directory (or symbolic link to a directory) on the device's ``/data`` partition. This directory will contain the ``system.img`` at ``var/lib/lxc/android/system.img``.
* A partition containing the rootfs. This partition will contain the ``system.img`` at ``var/lib/lxc/android/system.img``.

These formats are provided for reference only. The pre-rootfs environment should allow the use of one or more of these reference formats if it does not provide its own. Providing additional rootfs formats is described in `Additional rootfs formats`_ in this document.

If the pre-rootfs environment supports the use of multiple rootfs formats, the correct format to use shall be automatically detected at run time.

Read-only or read-write
^^^^^^^^^^^^^^^^^^^^^^^

A HSD rootfs shall configure whether it expects to be mounted read-write or read-only. HSDs which wish to be mounted read-write shall provide the ``/.writable_image`` file in their rootfs. If this file does not exist, the rootfs shall be mounted read-only.

Pre-rootfs environments shall respect the configuration of the HSD.

Android partition mounts
------------------------

The pre-rootfs environment shall mount all partitions that are required to run Android on the Device. These partitions shall be mounted into the ``/android`` directory of the rootfs. They generally include block devices which back the filesystem in Android and include mount points such as ``/persist``, ``/firmware``, and ``/efs``. These would become ``/android/persist``, ``/android/firmware``, and ``/android/efs`` in the HSD rootfs.

Generally, each partition on the device is mounted by reading the ``fstab`` file generated by the Android build system. This file should be retrieved from the Halium-provided Android system image at each boot.

Special cases
^^^^^^^^^^^^^

The ``/system`` and ``/data`` Android filesystems are special cases. They must be mounted differently than the remaining block device mounts.

``/system``
"""""""""""

``/system`` shall be the filesystem provided by the Android ``system.img``. 

``/data``
"""""""""

``/data`` shall be a location on non-volatile, writable storage. The location shall not contain the rootfs' user data storage. This prevents the Android container being able to access the Device owner's data.

.. note::

    In practice, this can be achieved by mounting the physical ``/data/android-data`` at the HSD's ``/android/data``. The Device owner's data can then safely reside at the root of ``/data``.

``/userdata``
-------------

A non-volatile and writable location to store user data shall be mounted at the rootfs' ``/userdata`` mount point.

.. note::

    Most pre-rootfs environments choose to mount the Device's physical ``/data`` partition at the rootfs' ``/userdata``.

Kernel modules mount
--------------------

The pre-rootfs environment shall mount Linux kernel modules stored at ``/android/system/lib/modules`` into the rootfs. The target of these mounts shall be specified by the rootfs in the file ``/etc/halium/modules``.

The rootfs' configuration file for this behavior may include the text ``$version``, which is a variable that shall be replaced by the running Linux kernel's release identifier. This identifier is generally found by running the command ``uname -r``.

The following is an example of the ``/etc/halium/modules`` file, which specifies that the pre-rootfs environment should mount kernel modules at the rootfs' ``/lib/modules/[VERSION]``.

.. code-block:: text
   :name: /etc/halium/modules
   
    /lib/modules/$version

In this case, if the kernel identifier is ``4.13.11-31.current``, the target of the Linux kernel module mount shall be ``/lib/modules/4.13.11-31.current/`` on the rootfs.

Writable paths
--------------

The pre-rootfs environment shall provide Ubuntu Core-style writable-path generation. This should be done by:

* Creating a ``fstab`` file in temporary storage
* Reading the ``/etc/system-image/writable-paths`` file from the HSD rootfs, which shall be formatted in the `Ubuntu Core writable-paths`_ style.
* For each entry in the file:
    * Create a location for the path to be redirected to in an appropriate place in the rootfs' `/userdata`_ (from here called the 'target')
    * Depending on the type of path specified, copy all files and directories below the HSD rootfs path to the target
    * Create an ``fstab`` entry specifying a mount from the rootfs path to the target
* Mounting the temporary ``fstab`` to the HSD rootfs' ``/etc/fstab`` file.

If the ``/etc/system-image/writable-paths`` file is not available, no attempt to perform writable-path generation shall be made.

Reference implementations may be found in `initramfs-tools-halium's halium script`_ or `initramfs-tools-ubuntu-core`_.

Booting the HSD
---------------

The pre-rootfs environment shall change the root filesystem to the HSD rootfs and execute ``/sbin/init`` as its last action. The only reason for code in the the pre-rootfs environment to continue executing after this point is to account for a failure to change root.

Debugging
---------

The pre-rootfs environment should provide tools to debug its operation on the devices which it runs on. These tools make it easier for porters to find and fix problems in the pre-rootfs environment or their port.

Examples of debugging tools include, but are not limited to:

* Shell access through Telnet or SSH on boot failure
* Logging information and errors to the Device's kernel message buffer
* Showing information on the Device's screen

Developers should consider the security and privacy implications of debugging tools and provide appropriate protections to users of their pre-rootfs environment.

Additional features
-------------------

The pre-rootfs environment may implement additional functionality that is not listed in this standard. This functionality can include additional security features, software update mechanisms, HSD rootfs formats, etc. This additional functionality shall not contradict the text of this standard. The functionality shall be opt-in by the HSD, meaning a configuration for the feature shall be present in the rootfs before the pre-rootfs environment will attempt to use it.

Documentation of the configuration that a HSD must provide for this extra functionality shall be provided by the pre-rootfs environment vendor.

Additional rootfs formats
^^^^^^^^^^^^^^^^^^^^^^^^^

As stated in `Rootfs`_ in this document, a pre-rootfs environment may provide its own rootfs formats. These formats may be provided in addition to or in replacement of the reference formats. If a new format is provided in replacement of the reference formats, the environment vendor should provide tools to install the most common form of HSD distribution in their format. More information about installation tools can be found at `Installation for common HSD distributions`_

Additional rootfs formats are exceptions to the opt-in requirement of other additional features. Configuration for the rootfs format need not be present in the rootfs.

Installation for common HSD distributions
-----------------------------------------

Many HSDs distribute their rootfs as gzipped ``tar`` files. The pre-rootfs environment vendor should provide a way to install this distribution format to make it usable by their environment.

The installation tool should do all of the following:

* Extract the HSD ``.tar.gz`` file to the desired rootfs format
* Make symbolic links from the following directories in the HSD's root to `/android <Android partition mounts>`_:
    * cache
    * data
    * factory
    * firmware
    * persist
    * system
* Place the Android ``system.img`` at the location desired by the rootfs format

The tool shall warn its user if the desired rootfs format does not support the desired writable state (read-only or read-write) of the HSD. For example, the user will be warned if the rootfs format can only provide a writable mount but the HSD does not provide the ``.writable_image`` file.

Annex A: Summary for HSDs
-------------------------

An HSD maintainer can expect the following features and conventions from a standard-compliant Halium pre-rootfs environment:

* If the HSD rootfs is distributed as a ``.tar.gz`` archive, it should be installable and usable on any pre-rootfs environment.
* If the HSD rootfs has the ``/.writable_image`` file, it shall be mounted read-write. If not, it shall be mounted read-only
* All device partitions that are be required to run the Halium container and user space software shell be located at ``/android``. The symbolic links required to run Android user space software in the HSD user space shall be provided.
* A non-volatile, writable location to store userdata shall be mounted at ``/userdata``.
* A HSD shall provide the ``/etc/halium/modules`` file containing the path where it expects kernel modules for the current kernel version to be. See `Kernel modules mount`_ for information about the format of this file.
* An `Ubuntu Core writable-paths`_ file may be provided at ``/etc/system-image/writable-paths`` to define paths in the rootfs which will be available on writable, persistent storage.
* A pre-rootfs environment may provide extra functionality not specified in this document. If a HSD would like to use this functionality, it shall provide the needed configuration. The scope and requirements of this configuration shall be available from the pre-rootfs environment's vendor.

Annex B: Reference implementation
---------------------------------

A reference implementation of this standard may be found at `initramfs-tools-halium`_ as the logic for the pre-rootfs environment and  `halium-boot`_ as the method for building it into an Android boot image.

Revision
--------

This is version 1.0.0 of the pre-rootfs environment standard. 

Changelog
^^^^^^^^^

1.0.0
"""""

This is the first version of the standard.

Draft date: March 30, 2018. 
Acceptance date: TODO

.. _ubuntu core writable-paths: http://manpages.ubuntu.com/manpages/xenial/en/man5/writable-paths.5.html
.. _initramfs-tools-halium's halium script: https://github.com/Halium/initramfs-tools-halium/blob/582349cf71ba6bcb223e0fa6ade1a647d930502b/scripts/halium#L238
.. _initramfs-tools-ubuntu-core: https://bazaar.launchpad.net/~snappy-dev/initramfs-tools-ubuntu-core/trunk/view/head:/scripts/ubuntu-core-rootfs#L63
.. _initramfs-tools-halium: https://github.com/halium/initramfs-tools-halium
.. _halium-boot: https://github.com/halium/halium-boot