Halium pre-rootfs standard
==========================

Introduction
------------

Halium-standard Linux distributions have different needs than their "Desktop" or "Laptop" counterparts. Often, a Halium-standard distribution will need to start the Android container before it is able to complete its initialization. The Halium pre-rootfs environment ensures that the distribution will be able to successfully start the Android container and continue booting.


Scope
-----

This document specifies the minimum requirements for a pre-rootfs environment that is able to boot Halium-standard Linux distributions. By doing so, it also specifies what a maintainer of a Halium-standard distribution can expect when their software begins to run.


Terms and definitions
---------------------

* Halium-standard Linux Distribution, HSD
    * A Linux (GNU/Linux optionally) software distribution that implements the Halium standards.
* HSD root filesystem, HSD rootfs, rootfs
    * The file and directory tree that makes up the HSD.
* Pre-rootfs environment
    * Code that executes before the init system of the HSD begins to run.
* Device
    * The computing system targeted by Halium.


Rootfs
------

The pre-rootfs environment shall mount the HSD rootfs and :ref:`its desired Android system.img <pre-systemimage>` from persistent storage. The rootfs can take the following formats:

* ``rootfs.img``, an image file located on the Device's ``/data`` partition. It will be accompanied by ``system.img``, which will be a sibling in its directory.
* ``halium-rootfs/``, a directory (or symbolic link to a directory) on the device's ``/data`` partition. This directory will contain the ``system.img`` at ``var/lib/lxc/android/system.img``.
* A partition containing the rootfs. This partition will contain the ``system.img`` at ``var/lib/lxc/android/system.img``.

These formats are provided for reference only. The pre-rootfs environment should allow the use of one or more of these reference formats if it does not provide its own.


Read-only or read-write
^^^^^^^^^^^^^^^^^^^^^^^

A HSD rootfs shall configure whether it expects to be mounted read-write or read-only. HSDs which wish to be mounted read-write shall provide the ``/.writable_image`` file in their rootfs. If this file does not exist, the rootfs shall be mounted read-only.

Pre-rootfs environments shell respect the configuration of the HSD.

Android partition mounts
------------------------

The pre-rootfs environment shall mount all partitions that are required to run Android on the Device. These partitions shall be mounted into the ``/android`` directory of the rootfs. They generally include block devices which back the filesystem in Android and include mount points such as ``/persist``, ``/firmware``, and ``/efs``. These would become ``/android/persist``, ``/android/firmware``, and ``/android/efs`` in the HSD rootfs.

Special cases
^^^^^^^^^^^^^

The ``/system`` and ``/data`` Android partitions are special cases. They must be mounted differently than the remaining block device mounts.

Generally, each partition on the device is mounted by reading the ``fstab`` file generated by the Android build system. This file should be retrieved from the Halium-provided Android system image at each boot.


.. _pre-systemimage:

``/system``
"""""""""""

``/system`` shall be the filesystem provided by the Android ``system.img``.


``/data``
"""""""""

``/data`` shall be a virtual mountpoint contained on non-volatile, writable storage. The virtual mountpoint shall not contain the rootfs' user data storage. This prevents the Android container being able to access the Device owner's data.

.. note::

    In practice, this can be achieved by mounting the physical ``/data/android-data`` at the HSD's ``/android/data``. The Device owner's data can then safely reside at the root of ``/data``.


``/userdata``
-------------

A non-volatile and writable location to store user data shall be mounted at the rootfs' ``/userdata`` mountpoint.

.. note::

    Most pre-rootfs environments choose to mount the Device's physical ``/data`` partition at the rootfs' ``/userdata``.

Kernel modules mount
--------------------

The pre-rootfs environment shall mount Linux kernel modules stored at ``/android/system/lib/modules`` into the rootfs. The target of these mounts shall be specified by the rootfs in the file ``/etc/halium/modules``.

The rootfs' configuration file for this behavior may include the text ``$version``, which is a variable that shall be replaced by the running Linux kernel's release identifier. This identifier is generally found by running the command ``uname -r``.

The following is an example of the ``/etc/halium/modules`` file, which specifies that the pre-rootfs environment should mount kernel modules at the rootfs' ``/lib/modules/[VERSION]``.

.. code-block:: text
   :name: /etc/halium/modules
   
    /lib/modules/$version

In this case, if the kernel identifier is ``4.13.11-31.current``, the target of the Linux kernel module mount shall be ``/lib/modules/4.13.11-31.current/`` on the rootfs.


Debugging
---------

The pre-rootfs environment should provide tools to debug its operation on the devices which it runs on. These tools make it easier for porters to find and fix problems in the pre-rootfs environment or their port.

Examples of debugging tools include, but are not limited to:

* Shell access through Telnet or SSH on boot failure
* Logging information and errors to the Device's kernel message buffer
* Showing information on the Device's screen

Developers should consider the security and privacy implications of debugging tools and provide appropriate protections to users of their pre-rootfs environment.

Additional features
-------------------

The pre-rootfs environment may implement additional functionality that is not listed in this standard. This functionality can include additional security features, software update mechanisms, HSD rootfs formats, etc. This additional functionality shall not contradict the text of this standard. The functionality shall also be opt-in on the part of the HSD, meaning a configuration for the feature must be present in the rootfs before the pre-rootfs environment may attempt to use it.
